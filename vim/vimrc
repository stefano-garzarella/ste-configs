call plug#begin('~/.vim/plugged')
Plug 'junegunn/vim-plug'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'christoomey/vim-system-copy'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/syntastic'
Plug 'airblade/vim-gitgutter'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'ervandew/supertab'
Plug 'flazz/vim-colorschemes'
Plug 'terryma/vim-multiple-cursors'
Plug 'yggdroot/indentline'
Plug 'reewr/vim-monokai-phoenix'
Plug 'bronson/vim-trailing-whitespace'
Plug 'mbbill/undotree'
Plug 'tpope/vim-surround'
Plug 'townk/vim-autoclose'
Plug 'shougo/neocomplete.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'xuyuanp/nerdtree-git-plugin'
Plug 'gregsexton/gitv'
Plug 'lervag/vimtex'
Plug 'dhruvasagar/vim-table-mode'
Plug 'chazy/cscope_maps'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'majutsushi/tagbar'
Plug 'sjl/gundo.vim'
Plug 'shougo/neossh.vim'
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
Plug 'jakykong/vim-zim'
Plug 'joanrivera/vim-zimwiki-syntax'
Plug 'vimwiki/vimwiki'
Plug 'jsfaint/gen_tags.vim'
Plug 'universal-ctags/ctags'
Plug 'romainl/vim-cool'
Plug 'vivien/vim-linux-coding-style'
call plug#end()

"Plug 'ludovicchabant/vim-gutentags'
"Plug 'skywind3000/gutentags_plus'
"Plug 'jsfaint/gen_tags.vim'
"Plug 'jcliang/vim-cscope-utils'
"Plug 'brookhong/cscope.vim'
"Plug 'vim-scripts/autoload_cscope.vim'

" vim-cool
let g:CoolTotalMatches = 1

syntax enable       	" enable syntax processing
"set number              " show line numbers
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to.
set showmatch           " highlight matching [{()}]
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set foldenable          " enable folding
set foldlevelstart=20
set colorcolumn=81
"set textwidth=80
set mouse=a
set tabstop=8
set shiftwidth=4
set softtabstop=8
set expandtab
set autoindent
set smartindent
set smarttab
set copyindent
set preserveindent
set smartcase
set ignorecase

"freebsd/linux code
"set noexpandtab
"set shiftwidth=8
let g:linuxsty_patterns = [ "/usr/src/", "/linux", "/fedora-linux" ]
autocmd BufNewFile,BufRead /home/stefano/repos/linux* call SetLinuxOptions()
autocmd BufNewFile,BufRead /home/stefano/repos/fedora-linux* call SetLinuxOptions()
function SetLinuxOptions()
    set list lcs=tab:\|\ 
    hi SpecialKey ctermfg=DarkGrey ctermbg=None
endfunction

set backspace=indent,eol,start

let g:gitgutter_enabled = 1

" Shit+Tab to insert Tab
inoremap <S-Tab> <C-V><Tab>

filetype plugin indent on
set nocompatible
filetype plugin on

highlight clear SignColumn

let mapleader = ","

filetype plugin on
filetype plugin indent on
colorscheme SlateDark

set laststatus=2	" show the status bar
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='cool'

let g:neocomplete#enable_at_startup = 1

if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif

" split navigation
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" auto going to last line
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" nerdtree
map <leader>nn :NERDTreeToggle<CR>

"yankstack
nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste

" buffer exploration
nnoremap <C-b> :bnext<CR>

" ctags support
set tags+=./tags;/,tags;/
set tags+=/var/tmp/tags

nnoremap <F5> :GundoToggle<CR>
nmap <F8> :TagbarToggle<CR>

" syntestic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

" YouCompleteMe parameters
"let g:ycm_confirm_extra_conf = 0
"nnoremap <leader>yd :YcmCompleter GetDoc<CR>
"nnoremap <leader>yt :YcmCompleter GetType<CR>
"nnoremap <leader>yg :YcmCompleter GoTo<CR>
"let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_global_ycm_extra_conf = "/home/stefano/.vim_runtime/sources_non_forked/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
" disable error report
"let g:ycm_enable_diagnostic_signs = 0
"let g:ycm_enable_diagnostic_highlighting = 0


" Rust
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)

let g:tex_flavor = 'latex'
